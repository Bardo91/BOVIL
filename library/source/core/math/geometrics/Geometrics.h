/////////////////////////////////////////////////////////////////////////////////////////
//	BOVIL: core
//
//		Author: Pablo Ramón Soria
//		Date:	2014-05-03
//
/////////////////////////////////////////////////////////////////////////////////////////


#include "../Matrix.h"

namespace BOViL{
	namespace math{
		//-------------------------------------------------------------------------------------
		//------------------------- Classes ---------------------------------------------------
		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------
		//-------------------------  Matrix related functions ---------------------------------
		//-------------------------------------------------------------------------------------
		Matrix<double> rotationEulerMatrix(float _alpha, float _beta, float _gamma);

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------
		//------------------------- Spatial function ------------------------------------------
		//-------------------------------------------------------------------------------------
		Matrix<double> triangulateFromImageToGround3D(unsigned int _px, unsigned int _py, Matrix<double> & _camPos, Matrix<double> &_camOri, double _focalLenght){
			double x_c = -_camPos(2, 0) / (_camOri(2, 0) + _camOri(2, 1)*_px / _focalLenght + _camOri(2, 2)*_py / _focalLenght);
			double arrayPos_c[3] = { x_c,
								_px / _focalLenght * x_c,
								_py / _focalLenght * x_c };

			Matrix<double> pos_c(arrayPos_c, 3, 1);

			return _camPos + _camOri*pos_c;
		}

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------
	}	// namespace geometrics

}	// namespace BOViL